
admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address:
      protocol: TCP
      address: 127.0.0.1
      port_value: 9901
static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 10000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          # configure logging
          access_log:
            name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/stdout
              log_format:
                text_format: |
                  [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%" %DYNAMIC_METADATA(envoy.filters.http.jwt_authn:jwt_payload:cid)%
          use_remote_address: true
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match:
                  safe_regex:
                    google_re2: {}
                    regex: "^/core/v\\d{1}/wikipedia/en/.*$"
                route:
                  regex_rewrite:
                    pattern:
                      google_re2: {}
                      regex: ".*\/([^\/]+)\/wikipedia\/([^\/]+)(\/.*)$"
                    substitution: /w/rest.php/\1\3
                  host_rewrite_header: "x-internal-host"
                  cluster: service_echoapi
                  rate_limits:
                    - stage: 0
                      actions:
                        - dynamic_metadata:
                            descriptor_key: user
                            metadata_key:
                              key: envoy.filters.http.jwt_authn
                              path:
                                - key: jwt_payload
                                - key: cid
                      limit:
                        dynamic_metadata:
                          metadata_key:
                            key: envoy.filters.http.jwt_authn
                            path:
                              - key: jwt_payload
                              - key: ratelimit
              - match:
                  prefix: "/"
                route:
                  host_rewrite_literal: www.google.com
                  cluster: service_echoapi
          http_filters:
          - name: envoy.filters.http.jwt_authn
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
              providers:
                wikimedia:
                  issuer: http://dev.wikipedia.org
                  local_jwks:
                    filename: /etc/envoy/jwks.json
                  forward: true
                  from_headers:
                    name: Authorization
                    value_prefix: Bearer
                  payload_in_metadata: "jwt_payload"
              rules:
                - match:
                    prefix: /
                  requires:
                    requires_any:
                      requirements:
                        - provider_name: wikimedia
                        - allow_missing: {}
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.lua.v2.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                  local path = request_handle:headers():get(":path")
                  project, lang = string.match(path, "^/%a+/v%d/(%a+)/(%a+)/.*$")

                  if(project) and (lang)
                  then
                    request_handle:headers():add("x-internal-host", lang .. "." ..project .. ".org")
                  end

                  -- Add IP address to dynamic metadata if JWT payload does not exists
                  if ( not(request_handle:streamInfo():dynamicMetadata():get("envoy.filters.http.jwt_authn") ~=nil)) then
                    ip_address = request_handle:headers():get("X-Forwarded-For")
                    request_handle:streamInfo():dynamicMetadata():set("envoy.filters.http.jwt_authn", "jwt_payload", {cid=ip_address})
                  end
                end
          - name: envoy.filters.http.ratelimit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
              domain: wikipedia
              timeout: 0.25s
              rate_limit_service:
                grpc_service:
                  envoy_grpc:
                    cluster_name: rate_limit_cluster
          - name: envoy.filters.http.router
  clusters:
  - name: service_echoapi
    connect_timeout: 0.25s
    type: LOGICAL_DNS
    # Comment out the following line to test on v6 networks
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: service_echoapi
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: echoapi
                port_value: 8888
    # From Getting Started; Disabled here...
    # transport_socket:
    #   name: envoy.transport_sockets.tls
    #   typed_config:
    #     "@type": type.googleapis.com/envoy.api.v2.auth.UpstreamTlsContext
    #     sni: www.google.com
  - name: rate_limit_cluster
    type: strict_dns
    connect_timeout: 0.25s
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: rate_limit_cluster
      endpoints:
        - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: ratelimit
                    port_value: 8081
